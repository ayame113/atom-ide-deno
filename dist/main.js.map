{"version":3,"file":"main.js","sources":["../src/main.ts"],"sourcesContent":["import {AutoLanguageClient, Convert} from 'atom-languageclient'\r\nimport type {LanguageServerProcess, LanguageClientConnection, ActiveServer} from 'atom-languageclient'\r\nimport type {ServerManager} from 'atom-languageclient/lib/server-manager'\r\nimport type {Point} from \"atom\"\r\nimport {TextEditor} from \"atom\"\r\nimport type {TextDocumentIdentifier} from \"vscode-languageserver-protocol\";\r\nimport cp from 'child_process'\r\n\r\nconst getDenoPath = ()=>atom.config.get('atom-ide-deno.path')||'deno'\r\n\r\nlet isDebug: string = false\r\n\r\nclass DenoLanguageClient extends AutoLanguageClient {\r\n\t_emptyConnection!: LanguageClientConnection\r\n\t//isDebug=true時に再起動\r\n\tget isDebug() {return isDebug}\r\n\tset isDebug(v) {\r\n\t\tisDebug = v\r\n\t\tthis.restartAllServers()\r\n\t}\r\n\tgetGrammarScopes () {\r\n\t\treturn [\r\n\t\t\t'source.js',\r\n\t\t\t'source.jsx',\r\n\t\t\t'source.ts',\r\n\t\t\t'source.tsx',\r\n\t\t\t'JavaScript',\r\n\t\t\t'TypeScript',\r\n\t\t\t//'source.gfm', <-not supported at deno lsp\r\n\t\t\t'source.json',\r\n\t\t]\r\n\t}\r\n\tgetLanguageName () { return 'JavaScript' }\r\n\tgetServerName () { return 'deno-language-server' }\r\n\tgetInitializeParams(...args: [string, LanguageServerProcess]) {\r\n\t\tconst initializationOptions = atom.config.get('atom-ide-deno.lspFlags')\r\n\t\t//filter empty string\r\n\t\tinitializationOptions.importMap = initializationOptions.importMap||void 0\r\n\t\tinitializationOptions.config = initializationOptions.config||void 0\r\n\t\t//suggest.imports.hosts の入力はArrayだが、渡すときにObjectに変換する必要がある\r\n\t\t//https://github.com/denoland/vscode_deno/blob/main/docs/ImportCompletions.md\r\n\t\ttry {\r\n\t\t\tinitializationOptions.suggest.imports.hosts = Object.fromEntries(initializationOptions.suggest.imports.hosts.map((v: string)=>[v, true]))\r\n\t\t} catch(e) {console.log(e)}\r\n\t\tif (this.isDebug) {console.log(initializationOptions)}\r\n\t\t//https://github.com/denoland/deno/pull/8850\r\n\t\t//enableフラグが必要\r\n\t\treturn Object.assign(\r\n\t\t\tsuper.getInitializeParams(...args),\r\n\t\t\t{initializationOptions}\r\n\t\t)\r\n\t}\r\n\trestartAllServers(...args: []) {\r\n\t\tconsole.log('restart Deno Language server')\r\n\t\tatom.notifications.addInfo('restart Deno Language server')\r\n\t\treturn super.restartAllServers(...args)\r\n\t}\r\n\t/*getSuggestionDetailsOnSelect(suggestion, ...args) {\r\n\t\t//insertTextFormat==2の場合、スニペットとして解釈される\r\n\t\t//スニペット用のテキストがlspから提供されてないので、通常の補完として利用する\r\n\t\tif (this.isDebug) {console.log(suggestion)}\r\n\t\tif (suggestion.snippet==='') {\r\n\t\t\tsuggestion.snippet = void 0\r\n\t\t}\r\n\t\treturn super.getSuggestionDetailsOnSelect(suggestion, ...args)\r\n\t}*/\r\n\tasync getDefinition(...args: [TextEditor, Point]) {\r\n\t\tconst res = await super.getDefinition(...args)\r\n\t\tif (this.isDebug) {console.log(res)}\r\n\t\tif (res==null) {return null}\r\n\t\tconst {definitions, ...others} = res\r\n\t\t// `deno:/` から始まるカスタムリクエストは相対パスとして解釈されてしまう\r\n\t\t// `deno://` に置換して返す\r\n\t\treturn {\r\n\t\t\tdefinitions: definitions.map(d=>{\r\n\t\t\t\tif (!d.path) {return d}\r\n\t\t\t\tif (typeof d.path!='string') {return d}\r\n\t\t\t\tif (!d.path.startsWith('deno:/') || d.path.startsWith('deno://')) {return d}\r\n\t\t\t\td.path = d.path.replace('deno:/', 'deno://')\r\n\t\t\t\treturn d\r\n\t\t\t}),\r\n\t\t\t...others\r\n\t\t}\r\n\t}\r\n\tstartServerProcess(_projectPath: string) {\r\n\t\tconsole.log('Starting deno language server')\r\n\t\t//if (!this.isDebug) {\r\n\t\t\treturn cp.spawn(getDenoPath(), ['lsp'], {env: process.env})\r\n\t\t//} else {\r\n\t\t\t/*const formatData = data=>data.toString().split('\\n').map(v=>{\r\n\t\t\t\ttry {return JSON.parse(v)}\r\n\t\t\t\tcatch (_) {return v}\r\n\t\t\t})\r\n\t\t\tconst env = process.env\r\n\t\t\tconsole.log(env)\r\n\t\t\tconst childProcess = cp.spawn(getDenoPath(), ['lsp'], {\r\n\t\t\t\tenv: env\r\n\t\t\t})\r\n\t\t\tconst originalWriter = childProcess.stdin.write\r\n\t\t\tchildProcess.stdin.write = function (...args) {\r\n\t\t\t\tconsole.log('[stdin]', ...args.flatMap(formatData))\r\n\t\t\t\toriginalWriter.apply(childProcess.stdin, args)\r\n\t\t\t}\r\n\t\t\tchildProcess.stdout.on('data', (data) => {\r\n\t\t\t\tconsole.log('[stdout]', ...formatData(data))\r\n\t\t\t})\r\n\t\t\tchildProcess.stderr.on('data', (data) => {\r\n\t\t\t\tconsole.log('[stderr]', ...formatData(data))\r\n\t\t\t})\r\n\t\t\tchildProcess.on('close', exitCode => {\r\n\t\t\t\tif (!childProcess.killed) {\r\n\t\t\t\t\tatom.notifications.addError('Deno language server stopped unexpectedly.', {\r\n\t\t\t\t\t\tdismissable: true,\r\n\t\t\t\t\t\tdescription: this.processStdErr ? `<code>${this.processStdErr}</code>` : `Exit code ${exitCode}`\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(this.processStdErr)\r\n\t\t\t})\r\n\t\t\treturn childProcess*/\r\n\t\t//}\r\n\t}\r\n\t//custom request util\r\n\tgetCurrentConnection(): Promise<LanguageClientConnection | null> {\r\n\t\tconst currentEditor = atom.workspace.getActiveTextEditor()\r\n\t\tif (currentEditor) {\r\n\t\t\treturn this.getConnectionForEditor(currentEditor)\r\n\t\t} else {\r\n\t\t\treturn Promise.resolve(null)\r\n\t\t}\r\n\t}\r\n\tasync getAnyConnection() {\r\n\t\tconst activeServers = ((this as any)._serverManager as ServerManager).getActiveServers()\r\n\t\tif (activeServers.length) {\r\n\t\t\treturn activeServers[0].connection\r\n\t\t}\r\n\t\t//activeServerが空の場合、仮のconnectionを用意\r\n\t\tif (!this._emptyConnection) {\r\n\t\t\tthis._emptyConnection = (await ((this as any).startServer('') as Promise<ActiveServer>)).connection\r\n\t\t\treturn this._emptyConnection\r\n\t\t}\r\n\t\treturn this._emptyConnection\r\n\t}\r\n\tasync sendCustomRequestForCurrentEditor(method: string, params?: any[] | object) {\r\n\t\treturn (await this.getCurrentConnection())?.sendCustomRequest(method, params)\r\n\t}\r\n\tasync sendCustomRequestForAnyEditor(method: string, params?: any[] | object) {\r\n\t\treturn (await this.getAnyConnection()).sendCustomRequest(method, params)\r\n\t}\r\n\t//custom request\r\n\tprovideDenoCache(textEditor: TextEditor) {\r\n\t\treturn this.sendCustomRequestForCurrentEditor(\r\n\t\t\t'deno/cache', {\r\n\t\t\t\treferrer: Convert.editorToTextDocumentIdentifier(\r\n\t\t\t\t\ttextEditor||atom.workspace.getActiveTextEditor()\r\n\t\t\t\t),\r\n\t\t\t\turis: []\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\tprovideDenoPerformance() {\r\n\t\treturn this.sendCustomRequestForAnyEditor('deno/performance')\r\n\t}\r\n\tprovideDenoReloadImportRegistries() {\r\n\t\treturn this.sendCustomRequestForAnyEditor('deno/reloadImportRegistries')\r\n\t}\r\n\tprovideDenoVirtualTextDocument(textDocumentIdentifier: TextDocumentIdentifier) {\r\n\t\treturn this.sendCustomRequestForAnyEditor('deno/virtualTextDocument', {\r\n\t\t\ttextDocument: textDocumentIdentifier\r\n\t\t})\r\n\t}\r\n\t//custom request extends\r\n\tprovideDenoCacheAll() {\r\n\t\tconst grammarScopes = this.getGrammarScopes()\r\n\t\treturn Promise.all(\r\n\t\t\tatom.workspace.getTextEditors()\r\n\t\t\t.filter(editor=>grammarScopes.includes(editor.getGrammar().scopeName))\r\n\t\t\t.map(editor=>this.provideDenoCache(editor))\r\n\t\t)\r\n\t}\r\n\tprovideDenoStatusDocument() {\r\n\t\treturn this.provideDenoVirtualTextDocument({uri: 'deno:/status.md'})\r\n\t}\r\n\tasync showDenoStatusDocument() {\r\n\t\treturn atom.notifications.addInfo('Deno Language Server', {\r\n\t\t\tdescription: await this.provideDenoStatusDocument(),\r\n\t\t\tdismissable: true,\r\n\t\t\ticon: 'deno'\r\n\t\t})\r\n\t}\r\n}\r\n\r\nconst denoLS = new DenoLanguageClient()\r\n\r\n//config変更時にlspを再起動\r\n//importMap pathの入力途中でfile not foundエラーが出るため、2秒間間引く\r\nlet inputTimeoutId: NodeJS.Timeout\r\natom.config.onDidChange('atom-ide-deno', _=>{\r\n\tconsole.log('atom-ide-deno config change caught')\r\n\tclearTimeout(inputTimeoutId)\r\n\tinputTimeoutId = setTimeout(_=>{\r\n\t\tdenoLS.restartAllServers()\r\n\t}, 2000)\r\n})\r\nexport default denoLS\r\n\r\n/*\r\nvirtual documentを表示\r\n*/\r\natom.workspace.addOpener(filePath=>{\r\n\tif (!filePath.startsWith('deno://')) {\r\n\t\treturn\r\n\t}\r\n\t//autoHeightが無いとスクロールバーが出ない\r\n\tconst editor = new TextEditor({autoHeight: false})\r\n\t//言語モードを設定\r\n\tatom.grammars.assignLanguageMode(\r\n\t\teditor.getBuffer(),\r\n\t\tatom.grammars.selectGrammar(filePath, ''/*sourceText*/).scopeName\r\n\t)\r\n\t// デフォルトの表示\r\n\teditor.setText('// please wait...\\n')\r\n\t//読み取り専用\r\n\teditor.setReadOnly(true)\r\n\t//タブ名\r\n\teditor.getTitle = ()=>filePath\r\n\teditor.getLongTitle = ()=>filePath\r\n\t//保存を無効にする\r\n\t// @ts-ignore\r\n\teditor.shouldPromptToSave = ()=>false\r\n\t//閉じるボタンの表示を調整\r\n\teditor.isModified = ()=>false\r\n\teditor.getBuffer().isModified = ()=>false\r\n\t// defer execution until the content display is complete\r\n\t// notice: return value is ignored\r\n\ttype trapFunctionName = 'setCursorBufferPosition' | 'scrollToBufferPosition'\r\n\tconst trapFunctions: Array<trapFunctionName> = ['setCursorBufferPosition', 'scrollToBufferPosition']\r\n\tconst calledArgs: {[P in trapFunctionName]?: any[][]} = {}\r\n\tconst originalFunctions: {[P in trapFunctionName]?: Function} = {}\r\n\tfor (const funcName of trapFunctions) {\r\n\t\tcalledArgs[funcName] = []\r\n\t\toriginalFunctions[funcName] = editor[funcName]\r\n\t\teditor[funcName] = (...args: any[])=>calledArgs[funcName]?.push(args)\r\n\t}\r\n\t(async _=>{\r\n\t\tconst doc = await denoLS.provideDenoVirtualTextDocument({\r\n\t\t\turi: filePath.replace('deno://', 'deno:/')\r\n\t\t})\r\n\t\ttry {\r\n\t\t\tawait editor.setText(doc, {bypassReadOnly: true})\r\n\t\t} catch {\r\n\t\t\teditor.setText(`// load was failed. (${filePath.replace('deno://', 'deno:/')})`, {bypassReadOnly: true})\r\n\t\t} finally {\r\n\t\t\t// execute deferred function\r\n\t\t\tfor (const funcName of trapFunctions) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\teditor[funcName] = originalFunctions[funcName]\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tcalledArgs[funcName].forEach(args=>editor[funcName](...args))\r\n\t\t\t}\r\n\t\t}\r\n\t})()\r\n\treturn editor\r\n})\r\n"],"names":[],"mappings":"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"}